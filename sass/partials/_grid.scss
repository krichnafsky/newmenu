// ******************************************
// flexible grid functions modified from Bourbon by thoughtbot, inc ============================== /
// http://thoughtbot.com/bourbon/#flex-grid ====================================================== /

$max-width:       1000px; // set page max-width
$column-width:    9%;    // set column width
$gutter-width:    1.099999%;     // set gutter width
$maximum-columns: 10;      // set max number of columns

@function columns($columns, $container-columns: $maximum-columns) {
  $width: $columns * $column-width + ($columns - 1) * $gutter-width;
  $container-width: $container-columns * $column-width + ($container-columns - 1) * $gutter-width;
  @return percentage($width / $container-width);
}

@function gutter($container-columns: $maximum-columns, $gutter: $gutter-width) {
  $container-width: $container-columns * $column-width + ($container-columns - 1) * $gutter-width;
  @return percentage($gutter / $container-width);
}

// row mixin includes clearfix hack, last-child margin fix and any global row styles ============= /
@mixin row {
  width: 100%;
  max-width: $max-width;
  margin: 0 auto;
  @include clearfix;
  @include nesting;
}

// target nested elements with grid styles. use in global styles as well as row mixin ============ /
@mixin nesting {
  padding: 0; // remove padding from parent container so floated columns can fill it

  & > div, & > section, & > footer, & > p, & > ul,
  & > table, & > button, & > label, & > aside,
  & > fieldset, & > input, & > select { // target only child elements of the container. add elements other than div as needed
    float: left;
    margin-right: gutter();
    @include box-sizing(border-box);
  }
  & > input, & > select {
    // float: left;
    // margin-right: gutter();
    // @include box-sizing(border-box);
    height: 2.3em;
  }
  & > input[type="checkbox"] {
    height: auto;
  }
}

// calculate offset amounts for offset columns =================================================== /
@function offset-columns($columns) {
  $margin: $columns * $column-width + $columns * $gutter-width;
  @return $margin;
}

@mixin offset($from-direction, $columns) {
  @if $from-direction == left {
    float: left;
    margin-left: offset-columns($columns);
  }
  @if $from-direction == right {
    float: right;
    margin-right: offset-columns($columns);
  }
}

// remove margin-right from last element in a row or container so all columns fit ================ /
@mixin last {
  margin-right: 0;
  float: right; // fixes poor alignment with right edge caused by percentage calculations
}

// added by keith to help with responsive behaviors
@mixin remove-last {
  float: left;
  margin-right: gutter();
}


// ******************************************
/*
    Developers have the option to utilize predefined column widths below.  Make sure first to make the containing
    element be a row before using predefined columns

    For example:
      <div class="row">
        <div class="col5">Column A</div>
        <div class="col5">Column B</div>
      </div>
 */

.row {
  @include row();
}

// General classes for quick sizes
.col1 {
  width: columns(10);
  @media screen and (min-width: 43.75em){
    width: columns(1);
  }
}
.col2 {
  width: columns(10);
  @media screen and (min-width: 43.75em){
    width: columns(2);
  }
}
.col3 {
  width: columns(10);
  @media screen and (min-width: 43.75em){
    width: columns(3);
  }
}
.col4 {
  width: columns(10);
  @media screen and (min-width: 43.75em){
    width: columns(4);
  }
}
.col5 {
  width: columns(10);
  @media screen and (min-width: 43.75em){
    width: columns(5);
  }
}
.col6 {
  width: columns(10);
  @media screen and (min-width: 43.75em){
    width: columns(6);
  }
}
.col7 {
  width: columns(10);
  @media screen and (min-width: 43.75em){
    width: columns(7);
  }
}
.col8 {
  width: columns(10);
  @media screen and (min-width: 43.75em){
    width: columns(8);
  }
}
.col9 {
  width: columns(10);
  @media screen and (min-width: 43.75em){
    width: columns(9);
  }
}
.col10 {
  width: columns(10);
}

